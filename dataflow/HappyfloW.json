{
	"name": "HappyfloW",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Happysink",
						"type": "DatasetReference"
					},
					"name": "Happyyy"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Happytable",
						"type": "DatasetReference"
					},
					"name": "Happysinken"
				}
			],
			"transformations": [
				{
					"name": "derivedColumn1"
				},
				{
					"name": "select1"
				},
				{
					"name": "assert1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          commentLength as short,",
				"          createdAt as string,",
				"          enterpriseClass as string,",
				"          factorSlugs as string[],",
				"          factors as string[],",
				"          key as integer,",
				"          language as string,",
				"          lostTime as short,",
				"          mood as string,",
				"          openedAt as string,",
				"          profile as string,",
				"          questionnaireSlug as string,",
				"          questionnaireTitle as string,",
				"          rawCountry as string,",
				"          reassign as short,",
				"          resolvedAt as string,",
				"          sentDate as string,",
				"          severity as string,",
				"          ticketType as string,",
				"          value as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     documentForm: 'documentPerLine') ~> Happyyy",
				"Happyyy derive(NPS = iif(value >= 9 && value <= 10, 1, iif(value >= 7 && value <= 8, 0, -1)),",
				"          Created = toDate(substring(createdAt, 0, 10), 'yyyy-MM-dd'),",
				"          Opened = toDate(substring(openedAt, 0, 10), 'yyyy-MM-dd'),",
				"          Resolved = toDate(substring(resolvedAt, 0, 10), 'yyyy-MM-dd')) ~> derivedColumn1",
				"derivedColumn1 select(mapColumn(",
				"          commentLength,",
				"          enterpriseClass,",
				"          key,",
				"          language,",
				"          lostTime,",
				"          mood,",
				"          profile,",
				"          questionnaireSlug,",
				"          questionnaireTitle,",
				"          rawCountry,",
				"          reassign,",
				"          sentDate,",
				"          severity,",
				"          ticketType,",
				"          value,",
				"          NPS,",
				"          Created,",
				"          Opened,",
				"          Resolved",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 assert(expectTrue(!isNull(value)\r",
				", false, 'assert1')) ~> assert1",
				"assert1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     recreate:true,",
				"     format: 'table',",
				"     staged: true,",
				"     allowCopyCommand: true,",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError') ~> Happysinken"
			]
		}
	}
}